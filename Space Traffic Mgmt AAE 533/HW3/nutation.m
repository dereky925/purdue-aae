function [N_matrix] = nutation( timeVector )


year = timeVector(1);
month = timeVector(2);
day = timeVector(3);
hour = timeVector(4);
minute = timeVector(5);
% Inputs
% Year - Gregorian
% Month - Gregorian 
% Day - Gregorian
% Hour - Gregorian
% Minute - Gregorian

% Nutation Transform

nutCoef = [
    [0, 0, 0, 0, 1, -171996.0, -174.2, 92025.0, 8.9];
    [0, 0, 0, 0, 2, 2062.0, 0.2, -895.0, 0.5];
    [-2, 0, 2, 0, 1, 46.0, 0.0, -24.0, 0.0];
    [2, 0, -2, 0, 0, 11.0, 0.0, 0.0, 0.0];
    [-2, 0, 2, 0, 2, -3.0, 0.0, 1.0, 0.0];
    [1, -1, 0, -1, 0, -3.0, 0.0, 0.0, 0.0];
    [0, -2, 2, -2, 1, -2.0, 0.0, 1.0, 0.0];
    [2, 0, -2, 0, 1, 1.0, 0.0, 0.0, 0.0];
    [0, 0, 2, -2, 2, -13187.0, -1.6, 5736.0, -3.1];
    [0, 1, 0, 0, 0, 1426.0, -3.4, 54.0, -0.1];
    [0, 1, 2, -2, 2, -517.0, 1.2, 224.0, -0.6];
    [0, -1, 2, -2, 2, 217.0, -0.5, -95.0, 0.3];
    [0, 0, 2, -2, 1, 129.0, 0.1, -70.0, 0.0];
    [2, 0, 0, -2, 0, 48.0, 0.0, 1.0, 0.0];
    [0, 0, 2, -2, 0, -22.0, 0.0, 0.0, 0.0];
    [0, 2, 0, 0, 0, 17.0, -0.1, 0.0, 0.0];
    [0, 1, 0, 0, 1, -15.0, 0.0, 9.0, 0.0];
    [0, 2, 2, -2, 2, -16.0, 0.1, 7.0, 0.0];
    [0, -1, 0, 0, 1, -12.0, 0.0, 6.0, 0.0];
    [-2, 0, 0, 2, 1, -6.0, 0.0, 3.0, 0.0];
    [0, -1, 2, -2, 1, -5.0, 0.0, 3.0, 0.0];
    [2, 0, 0, -2, 1, 4.0, 0.0, -2.0, 0.0];
    [0, 1, 2, -2, 1, 4.0, 0.0, -2.0, 0.0];
    [1, 0, 0, -1, 0, -4.0, 0.0, 0.0, 0.0];
    [2, 1, 0, -2, 0, 1.0, 0.0, 0.0, 0.0];
    [0, 0, -2, 2, 1, 1.0, 0.0, 0.0, 0.0];
    [0, 1, -2, 2, 0, -1.0, 0.0, 0.0, 0.0];
    [0, 1, 0, 0, 2, 1.0, 0.0, 0.0, 0.0];
    [-1, 0, 0, 1, 1, 1.0, 0.0, 0.0, 0.0];
    [0, 1, 2, -2, 0, -1.0, 0.0, 0.0, 0.0];
    [0, 0, 2, 0, 2, -2274.0, -0.2, 977.0, -0.5];
    [1, 0, 0, 0, 0, 712.0, 0.1, -7.0, 0.0];
    [0, 0, 2, 0, 1, -386.0, -0.4, 200.0, 0.0];
    [1, 0, 2, 0, 2, -301.0, 0.0, 129.0, -0.1];
    [1, 0, 0, -2, 0, -158.0, 0.0, -1.0, 0.0];
    [-1, 0, 2, 0, 2, 123.0, 0.0, -53.0, 0.0];
    [0, 0, 0, 2, 0, 63.0, 0.0, -2.0, 0.0];
    [1, 0, 0, 0, 1, 63.0, 0.1, -33.0, 0.0];
    [-1, 0, 0, 0, 1, -58.0, -0.1, 32.0, 0.0];
    [-1, 0, 2, 2, 2, -59.0, 0.0, 26.0, 0.0];
    [1, 0, 2, 0, 1, -51.0, 0.0, 27.0, 0.0];
    [0, 0, 2, 2, 2, -38.0, 0.0, 16.0, 0.0];
    [2, 0, 0, 0, 0, 29.0, 0.0, -1.0, 0.0];
    [1, 0, 2, -2, 2, 29.0, 0.0, -12.0, 0.0];
    [2, 0, 2, 0, 2, -31.0, 0.0, 13.0, 0.0];
    [0, 0, 2, 0, 0, 26.0, 0.0, -1.0, 0.0];
    [-1, 0, 2, 0, 1, 21.0, 0.0, -10.0, 0.0];
    [-1, 0, 0, 2, 1, 16.0, 0.0, -8.0, 0.0];
    [1, 0, 0, -2, 1, -13.0, 0.0, 7.0, 0.0];
    [-1, 0, 2, 2, 1, -10.0, 0.0, 5.0, 0.0];
    [1, 1, 0, -2, 0, -7.0, 0.0, 0.0, 0.0];
    [0, 1, 2, 0, 2, 7.0, 0.0, -3.0, 0.0];
    [0, -1, 2, 0, 2, -7.0, 0.0, 3.0, 0.0];
    [1, 0, 2, 2, 2, -8.0, 0.0, 3.0, 0.0];
    [1, 0, 0, 2, 0, 6.0, 0.0, 0.0, 0.0];
    [2, 0, 2, -2, 2, 6.0, 0.0, -3.0, 0.0];
    [0, 0, 0, 2, 1, -6.0, 0.0, 3.0, 0.0];
    [0, 0, 2, 2, 1, -7.0, 0.0, 3.0, 0.0];
    [1, 0, 2, -2, 1, 6.0, 0.0, -3.0, 0.0];
    [0, 0, 0, -2, 1, -5.0, 0.0, 3.0, 0.0];
    [1, -1, 0, 0, 0, 5.0, 0.0, 0.0, 0.0];
    [2, 0, 2, 0, 1, -5.0, 0.0, 3.0, 0.0];
    [0, 1, 0, -2, 0, -4.0, 0.0, 0.0, 0.0];
    [1, 0, -2, 0, 0, 4.0, 0.0, 0.0, 0.0];
    [0, 0, 0, 1, 0, -4.0, 0.0, 0.0, 0.0];
    [1, 1, 0, 0, 0, -3.0, 0.0, 0.0, 0.0];
    [1, 0, 2, 0, 0, 3.0, 0.0, 0.0, 0.0];
    [1, -1, 2, 0, 2, -3.0, 0.0, 1.0, 0.0];
    [-1, -1, 2, 2, 2, -3.0, 0.0, 1.0, 0.0];
    [-2, 0, 0, 0, 1, -2.0, 0.0, 1.0, 0.0];
    [3, 0, 2, 0, 2, -3.0, 0.0, 1.0, 0.0];
    [0, -1, 2, 2, 2, -3.0, 0.0, 1.0, 0.0];
    [1, 1, 2, 0, 2, 2.0, 0.0, -1.0, 0.0];
    [-1, 0, 2, -2, 1, -2.0, 0.0, 1.0, 0.0];
    [2, 0, 0, 0, 1, 2.0, 0.0, -1.0, 0.0];
    [1, 0, 0, 0, 2, -2.0, 0.0, 1.0, 0.0];
    [3, 0, 0, 0, 0, 2.0, 0.0, 0.0, 0.0];
    [0, 0, 2, 1, 2, 2.0, 0.0, -1.0, 0.0];
    [-1, 0, 0, 0, 2, 1.0, 0.0, -1.0, 0.0];
    [1, 0, 0, -4, 0, -1.0, 0.0, 0.0, 0.0];
    [-2, 0, 2, 2, 2, 1.0, 0.0, -1.0, 0.0];
    [-1, 0, 2, 4, 2, -2.0, 0.0, 1.0, 0.0];
    [2, 0, 0, -4, 0, -1.0, 0.0, 0.0, 0.0];
    [1, 1, 2, -2, 2, 1.0, 0.0, -1.0, 0.0];
    [1, 0, 2, 2, 1, -1.0, 0.0, 1.0, 0.0];
    [-2, 0, 2, 4, 2, -1.0, 0.0, 1.0, 0.0];
    [-1, 0, 4, 0, 2, 1.0, 0.0, 0.0, 0.0];
    [1, -1, 0, -2, 0, 1.0, 0.0, 0.0, 0.0];
    [2, 0, 2, -2, 1, 1.0, 0.0, -1.0, 0.0];
    [2, 0, 2, 2, 2, -1.0, 0.0, 0.0, 0.0];
    [1, 0, 0, 2, 1, -1.0, 0.0, 0.0, 0.0];
    [0, 0, 4, -2, 2, 1.0, 0.0, 0.0, 0.0];
    [3, 0, 2, -2, 2, 1.0, 0.0, 0.0, 0.0];
    [1, 0, 2, -2, 0, -1.0, 0.0, 0.0, 0.0];
    [0, 1, 2, 0, 1, 1.0, 0.0, 0.0, 0.0];
    [-1, -1, 0, 2, 1, 1.0, 0.0, 0.0, 0.0];
    [0, 0, -2, 0, 1, -1.0, 0.0, 0.0, 0.0];
    [0, 0, 2, -1, 2, -1.0, 0.0, 0.0, 0.0];
    [0, 1, 0, 2, 0, -1.0, 0.0, 0.0, 0.0];
    [1, 0, -2, -2, 0, -1.0, 0.0, 0.0, 0.0];
    [0, -1, 2, 0, 1, -1.0, 0.0, 0.0, 0.0];
    [1, 1, 0, -2, 1, -1.0, 0.0, 0.0, 0.0];
    [1, 0, -2, 2, 0, -1.0, 0.0, 0.0, 0.0];
    [2, 0, 0, 2, 0, 1.0, 0.0, 0.0, 0.0];
    [0, 0, 2, 4, 2, -1.0, 0.0, 0.0, 0.0];
    [0, 1, 0, 1, 0, 1.0, 0.0, 0.0, 0.0]];

% Compute T Nutation

% Compute Terrestrial Time, add 37 leap seconds to UTC to convert to Atomic
% time, then add 32.184 seconds to convert to Terrestrial Time

% Define the date and time
minute = minute + (37 + 32.184)/60;

% If the month is January or February, adjust year and month
if month <= 2
    year = year - 1;
    month = month + 12;
end

% Calculate A and B
A = floor(year / 100);
B = 2 - A + floor(A / 4);

% Calculate the Julian Day
JD_TT = floor(365.25 * (year + 4716)) + floor(30.6001 * (month + 1)) + day + B - 1524.5;

% Adjust for the time in hours and minutes (convert to fractional day)
fractional_day = (hour + minute / 60) / 24;
JD_TT = JD_TT + fractional_day;

T_N = (JD_TT - 2451545) / 36525;

% Compute nutation terms [rad]
I   = pi/180*(  (134 + 57/60 + 46.733/3600) + (477198 + 52/60 + 2.633/3600)*T_N  + (31.310/3600)*T_N^2 + (0.064/3600)*T_N^3  );
I_  = pi/180*(  (357 + 31/60 + 39.804/3600) + (35999  + 3/60  + 1.244/3600)*T_N  - (0.577/3600)*T_N^2  - (0.012/3600)*T_N^3  );
F   = pi/180*(  (93  + 16/60 + 18.877/3600) + (483202 + 1/60  + 3.137/3600)*T_N  - (13.257/3600)*T_N^2 + (0.011/3600)*T_N^3  );
D   = pi/180*(  (297 + 51/60 + 1.307/3600)  + (445267 + 6/60  + 41.328/3600)*T_N - (6.891/3600)*T_N^2  + (0.019/3600)*T_N^3  );
Ohm = pi/180*(  (125 + 2/60  + 40.280/3600) - (1934   + 8/60  + 10.539/3600)*T_N - (7.455/3600)*T_N^2  + (0.008/3600)*T_N^3  );

% Compute ecliptic [rad]
ecliptic = pi/180*(  23.43929111 - (46.8150/3600)*T_N - (0.00059/3600)*T_N^2 + (0.001813/3600)*T_N^3  );

dEp = 0;
dPsi = 0;
for i = 1:106
    phi = nutCoef(i,1)*I + nutCoef(i,2)*I_ + nutCoef(i,3)*F + nutCoef(i,4)*D + nutCoef(i,5)*Ohm; % [rad] 

    dPsi = ( dPsi + (nutCoef(i,6) + nutCoef(i,7)*T_N) * sin(phi) ) / 1000 / 3600 * pi/180; % [0.0001 Arc seconds] [mas] milliarc seconds / 1000 / 3600 * 180/pi = [rad]
    dEp  = ( dEp + (nutCoef(i,8) + nutCoef(i,9)*T_N) * cos(phi) ) / 1000 / 3600 * pi/180;  % [0.0001 Arc seconds] [mas] milliarc seconds / 1000 / 3600 * 180/pi = [rad]
end

dEcEp = -ecliptic - dEp;

R1_Epsilon = [1          0           0;
              0    cos(dEcEp)   sin(dEcEp);
              0   -sin(dEcEp)   cos(dEcEp)];

R1_Ecliptic = [1          0               0;
               0    cos(ecliptic)   sin(ecliptic);
               0   -sin(ecliptic)   cos(ecliptic)];

R3_psi = [cos(-dPsi)    sin(-dPsi)   0;
         -sin(-dPsi)    cos(-dPsi)   0;
             0              0        1 ];

N_matrix = R1_Epsilon * R3_psi * R1_Ecliptic;


end